import requests
import time 
import os
import sqlite3
from urllib.parse import quote_plus
import json
import random

url = "http://127.0.0.1:5000"

def generate_commnet(promt_text, topic_news):
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:streamGenerateContent?alt=sse"
    headers = {
        "Accept": "*/*",
        "Content-Type": "application/json",
        "x-goog-api-key": "AIzaSyCIvoMfv-v54yLrgXaWu52t-L7eymSXFnA"
    }
    prompt_text = promt_text
    news_text = topic_news
    body = {
    "contents": [
        {
            "parts": [
                {
                    "text": prompt_text
                },
                {
                    "text": f"""‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß: {news_text}  ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå 10 ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå  Output Format: ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö (1. 2. 3.) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå / ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° / ‡∏Ç‡πâ‡∏≠‡πÉ‡∏î ‡πÜ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 10 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô """
                }
            ],
            "role": "user"
        }
    ],
    "generationConfig": {
        "temperature": 1,
        "topP": 1,
        "topK": 1500,
        "maxOutputTokens": 8192
    }
}
    try:
        response = requests.post(url, headers=headers, json=body, stream=True)
        print("üì• Gemini API Status:", response.status_code)

        if response.status_code != 200:
            print("‚ùå Gemini API response:", response.text)
            return []

        full_text = ""

        for line in response.iter_lines():
            if line:
                decoded_line = line.decode("utf-8")
                if decoded_line.startswith("data: "):
                    json_data = decoded_line[6:]
                    try:
                        parsed = json.loads(json_data)
                        parts = parsed.get("candidates", [])[0].get("content", {}).get("parts", [])
                        for part in parts:
                            full_text += part.get("text", "")
                    except Exception as e:
                        continue  # ‡∏Ç‡πâ‡∏≤‡∏° event ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON

        # ‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        comment_lines = [line.strip() for line in full_text.split("\n") if line.strip()]
        return comment_lines[:10]

    except Exception as e:
        print("‚ùå ERROR calling Gemini API:", e)
        return []

def get_charactor():
    base_dir = os.path.dirname(os.path.abspath(__file__))
    char_db_path = os.path.join(base_dir, "./promt.db")
    conn_prompt = sqlite3.connect(char_db_path)
    cursor_prompt = conn_prompt.cursor()
    cursor_prompt.execute("SELECT * FROM charactor LIMIT 1")
    row = cursor_prompt.fetchone()
    prompt_text = row[1]  # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 2 (index 1)
    conn_prompt.close()
    return prompt_text 

def get_project_folders():
    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))  # ‚¨ÖÔ∏è ‡∏¢‡πâ‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å /test
    project_folders = []
    for name in os.listdir(base_dir):
        path = os.path.join(base_dir, name)
        if name.startswith("data") and os.path.isdir(path):
            project_folders.append(name)
    project_folders.sort()
    return project_folders

def main():
    project_list = get_project_folders()
    promt_text = get_charactor()
    topic_news = "‡πÅ‡∏Ñ‡πà‡∏•‡∏≠‡∏á Test ‡∏ô‡∏∞"
    reaction = "like"
    link = "www.example.com"

    comments = generate_commnet(promt_text, topic_news)

    if not comments:
        print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å Gemini")
        return

    print("üìã ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:", comments)

    # üîÅ ‡πÅ‡∏à‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 1 ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ï‡πà‡∏≠ 1 ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡πÑ‡∏°‡πà‡∏ß‡∏ô)
    for project, comment in zip(project_list, comments):
        print(f"üìù [{project}] Comment =>", comment)

        insert_comment = f"{url}/api/update/{project}/like-and-comment?reaction_type={quote_plus(reaction)}&link={link}&comment_text={quote_plus(comment)}"

        try:
            response = requests.post(insert_comment)
            if response.status_code == 200:
                print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à [{project}]: {comment}")
            else:
                print(f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code} ‚Üí", response.text)
        except Exception as e:
            print("‚ùå Error POST:", e)

        time.sleep(1)

if __name__ == "__main__":
    main()